//
//  QNScaleStoreData.h
//  QNDeviceSDK
//
//  Created by Yolanda on 2018/1/9.
//  Copyright © 2018年 Yolanda. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "QNUser.h"
#import "QNScaleData.h"

/**
 This class is a scale-side storage data class.
 
 Storing data through data agents (QNDataProtocol) Callback "- (void)onGetStoredScale:(QNBleDevice *)device data:(NSArray <QNScaleStoreData *> *)storedDataList"
 
 
 Description of the generation of stored data:
 When the scale is measured without connection, the scale will automatically store the data to the scale end. When the scale is connected next time, the SDK will automatically read all the stored data of the scale end (when the stored data is read, the scale end Will erase all stored data), as long as the device is connected, whether or not to start measuring, the SDK will first determine whether there is stored data in the scale, if there is data will read the stored data first
 
 The behavior of storing data is generated by the user, and the SDK cannot control. When the merchant can choose whether to process the stored data (when the merchant processes the stored data, the SDK will read the stored data and return, and the merchant only needs to determine whether it is necessary to store the data)
 
 
 Processing instructions for storing data：
 1. No need to deal with stored data:
    If you do not need to accept stored data, you can not achieve"- (void)onGetStoredScale:(QNBleDevice *)device data:(NSArray <QNScaleStoreData *> *)storedDataList" Method, or implementation method does not do any processing
 
 2. Need to be in the case of storing data:
 
 
 Because the scale is used by many people, the data stored in one scale may be multi-person data. The SDK will transfer the processing of the stored data to the merchant to determine which user the stored data belongs to.
 
 It is necessary to determine which user the stored data belongs to in order to obtain detailed information about the stored data (see the call description of the method below)
 
 */

@interface QNScaleStoreData : NSObject

/** The weight value of the stored data */
@property (nonatomic, readonly, assign) double weight;

/** Measurement time for storing data */
@property (nonatomic, readonly, strong) NSDate *measureTime;


/**
 
 Set the owner of this stored data

 @param user QNUser
 */
- (void)setUser:(QNUser *)user;

/**
 Get measurement data details
 
 Must be called "- (void)setUser:(QNUser *)user" Determine the owner of the stored data to get the measurement data details
 
 @return QNScaleData
 */
- (QNScaleData *)generateScaleData;

@end
